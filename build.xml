<project name="geoscript.org" default="info" basedir=".">

    <property name="js.version" value="0.8"/>
    <property name="js.short" value="js"/>
    <property name="js.long" value="JavaScript"/>
    <property name="js.repo" value="tschaub/geoscript-js"/>

    <property name="py.version" value="1.0"/>
    <property name="py.short" value="py"/>
    <property name="py.long" value="Python"/>
    <property name="py.repo" value="jdeolive/geoscript-py"/>

    <property name="scala.version" value="0.9"/>
    <property name="scala.short" value="scala"/>
    <property name="scala.long" value="Scala"/>
    <property name="scala.repo" value="dwins/geoscript.scala"/>

    <property name="groovy.version" value="0.6"/>
    <property name="groovy.short" value="groovy"/>
    <property name="groovy.long" value="Groovy"/>
    <property name="groovy.repo" value="jericks/geoscript-groovy"/>

    <property name="repos" value="${basedir}/.repos"/>
    <property name="t" value="&#x0009;"/>
    
    <target name="info">
        <echo message="Checks out GeoScript sources and builds the site. The built site is located in the build directory."/>
        <echo message=""/>
        <echo message="Available tasks:"/>
        <echo message="${t}site:        Build the entire site."/>
        <echo message="${t}js-doc:      Build the js docs (js-pull first)."/>
        <echo message="${t}js-pull:     Update js repo."/>
        <echo message="${t}py-doc:      Build the py docs (py-pull first)."/>
        <echo message="${t}py-pull:     Update py repo."/>
        <echo message="${t}scala-doc:   Build the scala docs (scala-pull first)."/>
        <echo message="${t}scala-pull:  Update scala repo."/>
        <echo message="${t}groovy-doc:  Build the groovy docs (groovy-pull first)."/>
        <echo message="${t}groovy-pull: Update groovy repo."/>
        <echo message="${t}init:        Check out local git repos."/>
        <echo message="${t}clean:       Delete doc builds."/>
        <echo message="${t}clean-full:  Delete doc builds and local git repos."/>
    </target>
    
    <target name="init">
        <mkdir dir="${basedir}/build"/>
        <mkdir dir="${repos}"/>
        <condition property="repo.js.exists">
            <available file="${repos}/${js.short}"/>
        </condition>
        <condition property="repo.py.exists">
            <available file="${repos}/${py.short}"/>
        </condition>
        <condition property="repo.scala.exists">
            <available file="${repos}/${scala.short}"/>
        </condition>
        <condition property="repo.groovy.exists">
            <available file="${repos}/${groovy.short}"/>
        </condition>
    </target>
    
    <target name="init-js" depends="init">
        <antcall target="js-clone"/>
    </target>
    
    <target name="js-clone" unless="repo.js.exists">
        <exec executable="git" dir="${repos}">
            <arg value="clone"/> 
            <arg value="git://github.com/${js.repo}.git"/>
            <arg value="${js.short}"/>
        </exec>
    </target>
    
    <target name="js-pull" if="repo.js.exists" depends="init-js">
        <exec executable="git" dir="${repos}/${js.short}">
            <arg value="pull"/>
        </exec>
    </target>
    
    <target name="js-doc" depends="init-js">
        <exec executable="python">
            <arg value="jsdoc.py"/>
            <arg value="${repos}/${js.short}/lib/geoscript"/>
            <arg value="${repos}/${js.short}/doc/api/module.jst"/>
            <arg value="${repos}/${js.short}/doc/api"/>
        </exec>
        <exec executable="sphinx-build" dir="${basedir}/src" failonerror="true">
            <arg line="-E -b html -c ${basedir}/src -D html_theme_options.impl_repo='${js.repo}' -D html_theme_options.impl_long='${js.long}' -D html_theme_options.impl_short='${js.short}' -D version='${js.version}' -D release='${js.version}' -D html_title='GeoScript JS' -D html_short_title='GeoScript JS' -D html_theme=geoscript-common ${repos}/${js.short}/doc ${basedir}/build/${js.short}"/>
        </exec>
    </target>
    
    <target name="init-py" depends="init">
        <antcall target="py-clone"/>
    </target>
    
    <target name="py-clone" unless="repo.py.exists">
        <exec executable="git" dir="${repos}">
            <arg value="clone"/> 
            <arg value="git://github.com/${py.repo}.git"/>
            <arg value="${py.short}"/>
        </exec>
    </target>
    
    <target name="py-pull" if="repo.py.exists" depends="init-py">
        <exec executable="git" dir="${repos}/${py.short}">
            <arg value="pull"/>
        </exec>
    </target>
    
    <target name="py-doc" depends="init-py">
        <exec executable="sphinx-build" dir="${basedir}/src" failonerror="true">
            <arg line="-E -b html ${repos}/${py.short}/doc ${basedir}/build/${py.short}"/>
        </exec>
    </target>
    
    <target name="init-scala" depends="init">
        <antcall target="scala-clone"/>
    </target>

    <target name="scala-clone" unless="repo.scala.exists">
        <exec executable="git" dir="${repos}">
            <arg value="clone"/> 
            <arg value="git://github.com/${scala.repo}.git"/>
            <arg value="${scala.short}"/>
        </exec>
    </target>
    
    <target name="scala-pull" if="repo.scala.exists" depends="init-scala">
        <exec executable="git" dir="${repos}/${scala.short}">
            <arg value="pull"/>
        </exec>
    </target>
    
    <target name="scala-doc" depends="init-scala">
        <exec executable="sphinx-build" dir="${basedir}/src" failonerror="true">
            <arg line="-E -b html -c ${basedir}/src -D html_theme_options.impl_repo='${scala.repo}' -D html_theme_options.impl_long='${scala.long}' -D html_theme_options.impl_short='${scala.short}' -D version='${scala.version}' -D release='${scala.version}' -D html_title='GeoScript Scala' -D html_short_title='GeoScript Scala' -D html_theme=geoscript-common ${repos}/${scala.short}/docs ${basedir}/build/${scala.short}"/>
        </exec>
        <exec executable="sbt" dir="${repos}/${scala.short}/">
            <arg value="update"/>
            <arg value="doc"/>
        </exec>
        <move file="${repos}/${scala.short}/geoscript/target/scala_2.7.7/doc/main/api/"
            todir="${basedir}/build/${scala.short}/"/>
    </target>

    <target name="init-groovy" depends="init">
        <antcall target="groovy-clone"/>
    </target>

    <target name="groovy-clone" unless="repo.groovy.exists">
        <exec executable="git" dir="${repos}">
            <arg value="clone"/>
            <arg value="git://github.com/${groovy.repo}.git"/>
            <arg value="${groovy.short}"/>
        </exec>
    </target>

    <target name="groovy-pull" if="repo.groovy.exists" depends="init-groovy">
        <exec executable="git" dir="${repos}/${groovy.short}">
            <arg value="pull"/>
        </exec>
    </target>

    <target name="groovy-doc" depends="init-groovy">
        <exec executable="sphinx-build" dir="${basedir}/src" failonerror="true">
            <arg line="-E -b html -c ${basedir}/src -D html_theme_options.impl_repo='${groovy.repo}' -D html_theme_options.impl_long='${groovy.long}' -D html_theme_options.impl_short='${groovy.short}' -D version='${groovy.version}' -D release='${groovy.version}' -D html_title='GeoScript Groovy' -D html_short_title='GeoScript Groovy' -D html_theme=geoscript-common ${repos}/${groovy.short}/doc ${basedir}/build/${groovy.short}"/>
        </exec>
        <exec executable="mvn" dir="${repos}/${groovy.short}/">
            <arg line="-Dmaven.test.skip=true"/>
            <arg line="package"/>
        </exec>
        <mkdir dir="${basedir}/build/${groovy.short}/api"/>
        <copy todir="${basedir}/build/${groovy.short}/api">
            <fileset dir="${repos}/${groovy.short}/target/groovydoc/">
                <include name="**/*"/>
            </fileset>
        </copy>
    </target>

    <target name="site-doc" depends="init">
        <exec executable="sphinx-build" dir="${basedir}/src" failonerror="true">
            <arg line="-E -b html . ${basedir}/build"/>
        </exec>
    </target>  
    
    <target name="site" depends="js-pull, js-doc, py-pull, py-doc, scala-pull, scala-doc, groovy-pull, groovy-doc, site-doc"/>
    
    <target name="clean">
        <delete dir="${basedir}/build"/>
    </target>
    
    <target name="clean-full" depends="clean">
        <delete dir="${repos}"/>
    </target>
</project>
